<#
//*********************************************************
//
//    NO Copyright .Use at your own risk.
//    Please modify :
//    1) the names of tables to generate enums : string nameforenum
//    2) the connection to the database : string connectionstring
//    3) the name of the model : string inputFile
//    Then save the file and you will have an enum ...
//*********************************************************
#>

<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Configuration" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string nameforenum=";SellerType;";
string inputFile = @"../../Mendeo.Mercurius.Data.FullDomain/MercuriusFullDomain.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
WriteCustomObservableCollection();
EndNamespace(namespaceName);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}

var map = new ExeConfigurationFileMap();
map.ExeConfigFilename = this.Host.ResolvePath(@"..\App.Config");

var config = ConfigurationManager.OpenMappedExeConfiguration(map, ConfigurationUserLevel.None);
var connectionstring = config.ConnectionStrings.ConnectionStrings["MercuriusDB"].ConnectionString;

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	if(!nameforenum.Contains(";"+entity.Name+";"))
		continue;
    fileManager.StartNewFile(entity.Name + "Enum.cs");
    BeginNamespace(namespaceName, code);
	#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>enum <#=code.Escape(entity)#><#=code.StringBefore(" : ", code.Escape(entity.BaseType))#>Enum
{	
	<#  string EnumGen="";
	string EnumTemplate="{0}={1},"+ Environment.NewLine;
	using (System.Data.SqlClient.SqlConnection sqlconn= new System.Data.SqlClient.SqlConnection(connectionstring))
		{
			sqlconn.Open();
			using(System.Data.SqlClient.SqlCommand sqlcomm=new System.Data.SqlClient.SqlCommand())
			{
				sqlcomm.CommandText = "select * from "+entity.Name;
				sqlcomm.Connection = sqlconn;
				using(System.Data.SqlClient.SqlDataReader sqldr= sqlcomm.ExecuteReader())
				{
					while(sqldr.Read())
					{
						//TODO : verify int , string...
						EnumGen += string.Format(EnumTemplate,sqldr[1].ToString().Replace("-","_").Replace(" ","_"),sqldr[0]);
					}
				}
			}
		}
		EnumGen = EnumGen.Substring(0, EnumGen.Length- (Environment.NewLine+",").Length);
	#>
	<#=EnumGen #>
	
}
<#
    EndNamespace(namespaceName);
}


fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
//public class FixupCollection<T> : ObservableCollection<T>
//{
//    protected override void ClearItems()
//    {
//        new List<T>(this).ForEach(t => Remove(t));
//    }

//    protected override void InsertItem(int index, T item)
//    {
//		if(item == null)
//			return;
//        if (!this.Contains(item))
//        {
//            base.InsertItem(index, item);
//        }
//    }
//}
<#+
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
